buildscript {
    ext.safeExtGet = { prop, fallback ->
        return rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.2.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22")
        classpath("com.facebook.react:react-native-gradle-plugin:0.74.3")
    }
}

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    namespace 'com.usercentrics.reactnative'
    compileSdkVersion libs.versions.compile.sdk.get().toInteger()

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = libs.versions.jvm.target.get()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        minSdkVersion libs.versions.min.sdk.get().toInteger()
        targetSdkVersion libs.versions.target.sdk.get().toInteger()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFile "proguard-rules.pro"
    }
}

repositories {
    google()
    mavenCentral()
}

dependencies {
    //noinspection GradleDynamicVersion
    implementation libs.react.native
    // Usercentrics
    implementation libs.usercentrics.ui

    androidTestImplementation libs.mockk.android
    androidTestImplementation libs.junit
    androidTestImplementation libs.androidx.junit.ktx
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
}
