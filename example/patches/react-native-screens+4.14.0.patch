diff --git a/node_modules/react-native-screens/android/CMakeLists.txt b/node_modules/react-native-screens/android/CMakeLists.txt
index 86ec079..1973efc 100644
--- a/node_modules/react-native-screens/android/CMakeLists.txt
+++ b/node_modules/react-native-screens/android/CMakeLists.txt
@@ -24,7 +24,7 @@ include_directories(
 )
 
 set_target_properties(rnscreens PROPERTIES
-    CXX_STANDARD 20
+    CXX_STANDARD 17
     CXX_STANDARD_REQUIRED ON
     CXX_EXTENSIONS OFF
     POSITION_INDEPENDENT_CODE ON
@@ -65,9 +65,6 @@ if(${RNS_NEW_ARCH_ENABLED})
                 ReactAndroid::rrc_text
                 ReactAndroid::glog
                 ReactAndroid::react_render_componentregistry
-                ReactAndroid::react_render_consistency
-                ReactAndroid::react_performance_timeline
-                ReactAndroid::react_render_observers_events
                 fbjni::fbjni
                 android
         )
diff --git a/node_modules/react-native-screens/android/build.gradle b/node_modules/react-native-screens/android/build.gradle
index 89c16be..f9d3c79 100644
--- a/node_modules/react-native-screens/android/build.gradle
+++ b/node_modules/react-native-screens/android/build.gradle
@@ -5,7 +5,7 @@ buildscript {
     ext {
         rnsDefaultTargetSdkVersion = 34
         rnsDefaultCompileSdkVersion = 34
-        rnsDefaultMinSdkVersion = 21
+        rnsDefaultMinSdkVersion = 23
         rnsDefaultKotlinVersion = '1.8.0'
     }
     ext.safeExtGet = {prop, fallback ->
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/FullWindowOverlayNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/FullWindowOverlayNativeComponent.d.ts.bak
new file mode 100644
index 0000000..81ed53f
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/FullWindowOverlayNativeComponent.d.ts.bak
@@ -0,0 +1,8 @@
+import type { ViewProps } from 'react-native';
+import { WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
+export interface NativeProps extends ViewProps {
+    accessibilityContainerViewIsModal?: WithDefault<boolean, true>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=FullWindowOverlayNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ModalScreenNativeComponent.d.ts b/node_modules/react-native-screens/lib/typescript/fabric/ModalScreenNativeComponent.d.ts
index 011f345..bf52445 100644
--- a/node_modules/react-native-screens/lib/typescript/fabric/ModalScreenNativeComponent.d.ts
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ModalScreenNativeComponent.d.ts
@@ -22,10 +22,10 @@ type GestureResponseDistanceType = Readonly<{
     top: Float;
     bottom: Float;
 }>;
-type StackPresentation = 'push' | 'modal' | 'transparentModal' | 'fullScreenModal' | 'formSheet' | 'pageSheet' | 'containedModal' | 'containedTransparentModal';
-type StackAnimation = 'default' | 'flip' | 'simple_push' | 'none' | 'fade' | 'slide_from_right' | 'slide_from_left' | 'slide_from_bottom' | 'fade_from_bottom' | 'ios_from_right' | 'ios_from_left';
-type SwipeDirection = 'vertical' | 'horizontal';
-type ReplaceAnimation = 'pop' | 'push';
+type StackPresentation = string;
+type StackAnimation = string;
+type SwipeDirection = string;
+type ReplaceAnimation = string;
 export interface NativeProps extends ViewProps {
     onAppear?: DirectEventHandler<ScreenEvent>;
     onDisappear?: DirectEventHandler<ScreenEvent>;
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ModalScreenNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/ModalScreenNativeComponent.d.ts.bak
new file mode 100644
index 0000000..011f345
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ModalScreenNativeComponent.d.ts.bak
@@ -0,0 +1,76 @@
+import type { ViewProps, ColorValue } from 'react-native';
+import type { DirectEventHandler, WithDefault, Int32, Float, Double } from 'react-native/Libraries/Types/CodegenTypes';
+type ScreenEvent = Readonly<{}>;
+type ScreenDismissedEvent = Readonly<{
+    dismissCount: Int32;
+}>;
+type TransitionProgressEvent = Readonly<{
+    progress: Double;
+    closing: Int32;
+    goingForward: Int32;
+}>;
+type HeaderHeightChangeEvent = Readonly<{
+    headerHeight: Double;
+}>;
+type SheetDetentChangedEvent = Readonly<{
+    index: Int32;
+    isStable: boolean;
+}>;
+type GestureResponseDistanceType = Readonly<{
+    start: Float;
+    end: Float;
+    top: Float;
+    bottom: Float;
+}>;
+type StackPresentation = 'push' | 'modal' | 'transparentModal' | 'fullScreenModal' | 'formSheet' | 'pageSheet' | 'containedModal' | 'containedTransparentModal';
+type StackAnimation = 'default' | 'flip' | 'simple_push' | 'none' | 'fade' | 'slide_from_right' | 'slide_from_left' | 'slide_from_bottom' | 'fade_from_bottom' | 'ios_from_right' | 'ios_from_left';
+type SwipeDirection = 'vertical' | 'horizontal';
+type ReplaceAnimation = 'pop' | 'push';
+export interface NativeProps extends ViewProps {
+    onAppear?: DirectEventHandler<ScreenEvent>;
+    onDisappear?: DirectEventHandler<ScreenEvent>;
+    onDismissed?: DirectEventHandler<ScreenDismissedEvent>;
+    onNativeDismissCancelled?: DirectEventHandler<ScreenDismissedEvent>;
+    onWillAppear?: DirectEventHandler<ScreenEvent>;
+    onWillDisappear?: DirectEventHandler<ScreenEvent>;
+    onHeaderHeightChange?: DirectEventHandler<HeaderHeightChangeEvent>;
+    onTransitionProgress?: DirectEventHandler<TransitionProgressEvent>;
+    onGestureCancel?: DirectEventHandler<ScreenEvent>;
+    onHeaderBackButtonClicked?: DirectEventHandler<ScreenEvent>;
+    onSheetDetentChanged?: DirectEventHandler<SheetDetentChangedEvent>;
+    screenId?: WithDefault<string, ''>;
+    sheetAllowedDetents?: number[];
+    sheetLargestUndimmedDetent?: WithDefault<Int32, -1>;
+    sheetGrabberVisible?: WithDefault<boolean, false>;
+    sheetCornerRadius?: WithDefault<Float, -1.0>;
+    sheetExpandsWhenScrolledToEdge?: WithDefault<boolean, false>;
+    sheetInitialDetent?: WithDefault<Int32, 0>;
+    sheetElevation?: WithDefault<Int32, 24>;
+    customAnimationOnSwipe?: boolean;
+    fullScreenSwipeEnabled?: boolean;
+    fullScreenSwipeShadowEnabled?: WithDefault<boolean, true>;
+    homeIndicatorHidden?: boolean;
+    preventNativeDismiss?: boolean;
+    gestureEnabled?: WithDefault<boolean, true>;
+    statusBarColor?: ColorValue;
+    statusBarHidden?: boolean;
+    screenOrientation?: string;
+    statusBarAnimation?: string;
+    statusBarStyle?: string;
+    statusBarTranslucent?: boolean;
+    gestureResponseDistance?: GestureResponseDistanceType;
+    stackPresentation?: WithDefault<StackPresentation, 'push'>;
+    stackAnimation?: WithDefault<StackAnimation, 'default'>;
+    transitionDuration?: WithDefault<Int32, 500>;
+    replaceAnimation?: WithDefault<ReplaceAnimation, 'pop'>;
+    swipeDirection?: WithDefault<SwipeDirection, 'horizontal'>;
+    hideKeyboardOnSwipe?: boolean;
+    activityState?: WithDefault<Float, -1.0>;
+    navigationBarColor?: ColorValue;
+    navigationBarTranslucent?: boolean;
+    navigationBarHidden?: boolean;
+    nativeBackButtonDismissalEnabled?: boolean;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ModalScreenNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/NativeScreensModule.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/NativeScreensModule.d.ts.bak
new file mode 100644
index 0000000..54083ed
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/NativeScreensModule.d.ts.bak
@@ -0,0 +1,6 @@
+import type { TurboModule } from 'react-native';
+export interface Spec extends TurboModule {
+}
+declare const _default: Spec | null;
+export default _default;
+//# sourceMappingURL=NativeScreensModule.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/NativeScreensModule.web.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/NativeScreensModule.web.d.ts.bak
new file mode 100644
index 0000000..a7a3c9d
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/NativeScreensModule.web.d.ts.bak
@@ -0,0 +1,3 @@
+declare const _default: {};
+export default _default;
+//# sourceMappingURL=NativeScreensModule.web.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenContainerNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/ScreenContainerNativeComponent.d.ts.bak
new file mode 100644
index 0000000..7fdabd3
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenContainerNativeComponent.d.ts.bak
@@ -0,0 +1,6 @@
+import type { ViewProps } from 'react-native';
+interface NativeProps extends ViewProps {
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ScreenContainerNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenContentWrapperNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/ScreenContentWrapperNativeComponent.d.ts.bak
new file mode 100644
index 0000000..a6c19a5
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenContentWrapperNativeComponent.d.ts.bak
@@ -0,0 +1,6 @@
+import type { ViewProps } from 'react-native';
+export interface NativeProps extends ViewProps {
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ScreenContentWrapperNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenFooterNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/ScreenFooterNativeComponent.d.ts.bak
new file mode 100644
index 0000000..d0e8d7c
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenFooterNativeComponent.d.ts.bak
@@ -0,0 +1,6 @@
+import type { ViewProps } from 'react-native';
+export interface NativeProps extends ViewProps {
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ScreenFooterNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenNativeComponent.d.ts b/node_modules/react-native-screens/lib/typescript/fabric/ScreenNativeComponent.d.ts
index 162e485..1793e1b 100644
--- a/node_modules/react-native-screens/lib/typescript/fabric/ScreenNativeComponent.d.ts
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenNativeComponent.d.ts
@@ -22,10 +22,10 @@ type GestureResponseDistanceType = Readonly<{
     top: Float;
     bottom: Float;
 }>;
-type StackPresentation = 'push' | 'modal' | 'transparentModal' | 'fullScreenModal' | 'formSheet' | 'pageSheet' | 'containedModal' | 'containedTransparentModal';
-type StackAnimation = 'default' | 'flip' | 'simple_push' | 'none' | 'fade' | 'slide_from_right' | 'slide_from_left' | 'slide_from_bottom' | 'fade_from_bottom' | 'ios_from_right' | 'ios_from_left';
-type SwipeDirection = 'vertical' | 'horizontal';
-type ReplaceAnimation = 'pop' | 'push';
+type StackPresentation = string;
+type StackAnimation = string;
+type SwipeDirection = string;
+type ReplaceAnimation = string;
 export interface NativeProps extends ViewProps {
     onAppear?: DirectEventHandler<ScreenEvent>;
     onDisappear?: DirectEventHandler<ScreenEvent>;
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/ScreenNativeComponent.d.ts.bak
new file mode 100644
index 0000000..1793e1b
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenNativeComponent.d.ts.bak
@@ -0,0 +1,76 @@
+import type { ViewProps, ColorValue } from 'react-native';
+import type { DirectEventHandler, WithDefault, Int32, Float, Double } from 'react-native/Libraries/Types/CodegenTypes';
+type ScreenEvent = Readonly<{}>;
+type ScreenDismissedEvent = Readonly<{
+    dismissCount: Int32;
+}>;
+type TransitionProgressEvent = Readonly<{
+    progress: Double;
+    closing: Int32;
+    goingForward: Int32;
+}>;
+type HeaderHeightChangeEvent = Readonly<{
+    headerHeight: Double;
+}>;
+type SheetDetentChangedEvent = Readonly<{
+    index: Int32;
+    isStable: boolean;
+}>;
+type GestureResponseDistanceType = Readonly<{
+    start: Float;
+    end: Float;
+    top: Float;
+    bottom: Float;
+}>;
+type StackPresentation = string;
+type StackAnimation = string;
+type SwipeDirection = string;
+type ReplaceAnimation = string;
+export interface NativeProps extends ViewProps {
+    onAppear?: DirectEventHandler<ScreenEvent>;
+    onDisappear?: DirectEventHandler<ScreenEvent>;
+    onDismissed?: DirectEventHandler<ScreenDismissedEvent>;
+    onNativeDismissCancelled?: DirectEventHandler<ScreenDismissedEvent>;
+    onWillAppear?: DirectEventHandler<ScreenEvent>;
+    onWillDisappear?: DirectEventHandler<ScreenEvent>;
+    onHeaderHeightChange?: DirectEventHandler<HeaderHeightChangeEvent>;
+    onTransitionProgress?: DirectEventHandler<TransitionProgressEvent>;
+    onGestureCancel?: DirectEventHandler<ScreenEvent>;
+    onHeaderBackButtonClicked?: DirectEventHandler<ScreenEvent>;
+    onSheetDetentChanged?: DirectEventHandler<SheetDetentChangedEvent>;
+    screenId?: WithDefault<string, ''>;
+    sheetAllowedDetents?: number[];
+    sheetLargestUndimmedDetent?: WithDefault<Int32, -1>;
+    sheetGrabberVisible?: WithDefault<boolean, false>;
+    sheetCornerRadius?: WithDefault<Float, -1.0>;
+    sheetExpandsWhenScrolledToEdge?: WithDefault<boolean, false>;
+    sheetInitialDetent?: WithDefault<Int32, 0>;
+    sheetElevation?: WithDefault<Int32, 24>;
+    customAnimationOnSwipe?: boolean;
+    fullScreenSwipeEnabled?: boolean;
+    fullScreenSwipeShadowEnabled?: WithDefault<boolean, true>;
+    homeIndicatorHidden?: boolean;
+    preventNativeDismiss?: boolean;
+    gestureEnabled?: WithDefault<boolean, true>;
+    statusBarColor?: ColorValue;
+    statusBarHidden?: boolean;
+    screenOrientation?: string;
+    statusBarAnimation?: string;
+    statusBarStyle?: string;
+    statusBarTranslucent?: boolean;
+    gestureResponseDistance?: GestureResponseDistanceType;
+    stackPresentation?: WithDefault<StackPresentation, 'push'>;
+    stackAnimation?: WithDefault<StackAnimation, 'default'>;
+    transitionDuration?: WithDefault<Int32, 500>;
+    replaceAnimation?: WithDefault<ReplaceAnimation, 'pop'>;
+    swipeDirection?: WithDefault<SwipeDirection, 'horizontal'>;
+    hideKeyboardOnSwipe?: boolean;
+    activityState?: WithDefault<Float, -1.0>;
+    navigationBarColor?: ColorValue;
+    navigationBarTranslucent?: boolean;
+    navigationBarHidden?: boolean;
+    nativeBackButtonDismissalEnabled?: boolean;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ScreenNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenNavigationContainerNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/ScreenNavigationContainerNativeComponent.d.ts.bak
new file mode 100644
index 0000000..954e375
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenNavigationContainerNativeComponent.d.ts.bak
@@ -0,0 +1,6 @@
+import type { ViewProps } from 'react-native';
+interface NativeProps extends ViewProps {
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ScreenNavigationContainerNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderConfigNativeComponent.d.ts b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderConfigNativeComponent.d.ts
index e66775d..099b65f 100644
--- a/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderConfigNativeComponent.d.ts
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderConfigNativeComponent.d.ts
@@ -1,10 +1,10 @@
 import type { ViewProps, ColorValue } from 'react-native';
 import type { Int32, WithDefault, DirectEventHandler } from 'react-native/Libraries/Types/CodegenTypes';
-type DirectionType = 'rtl' | 'ltr';
+type DirectionType = string;
 type OnAttachedEvent = Readonly<{}>;
 type OnDetachedEvent = Readonly<{}>;
-type BackButtonDisplayMode = 'minimal' | 'default' | 'generic';
-type BlurEffect = 'none' | 'extraLight' | 'light' | 'dark' | 'regular' | 'prominent' | 'systemUltraThinMaterial' | 'systemThinMaterial' | 'systemMaterial' | 'systemThickMaterial' | 'systemChromeMaterial' | 'systemUltraThinMaterialLight' | 'systemThinMaterialLight' | 'systemMaterialLight' | 'systemThickMaterialLight' | 'systemChromeMaterialLight' | 'systemUltraThinMaterialDark' | 'systemThinMaterialDark' | 'systemMaterialDark' | 'systemThickMaterialDark' | 'systemChromeMaterialDark';
+type BackButtonDisplayMode = string;
+type BlurEffect = string;
 export interface NativeProps extends ViewProps {
     onAttached?: DirectEventHandler<OnAttachedEvent>;
     onDetached?: DirectEventHandler<OnDetachedEvent>;
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderConfigNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderConfigNativeComponent.d.ts.bak
new file mode 100644
index 0000000..e66775d
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderConfigNativeComponent.d.ts.bak
@@ -0,0 +1,42 @@
+import type { ViewProps, ColorValue } from 'react-native';
+import type { Int32, WithDefault, DirectEventHandler } from 'react-native/Libraries/Types/CodegenTypes';
+type DirectionType = 'rtl' | 'ltr';
+type OnAttachedEvent = Readonly<{}>;
+type OnDetachedEvent = Readonly<{}>;
+type BackButtonDisplayMode = 'minimal' | 'default' | 'generic';
+type BlurEffect = 'none' | 'extraLight' | 'light' | 'dark' | 'regular' | 'prominent' | 'systemUltraThinMaterial' | 'systemThinMaterial' | 'systemMaterial' | 'systemThickMaterial' | 'systemChromeMaterial' | 'systemUltraThinMaterialLight' | 'systemThinMaterialLight' | 'systemMaterialLight' | 'systemThickMaterialLight' | 'systemChromeMaterialLight' | 'systemUltraThinMaterialDark' | 'systemThinMaterialDark' | 'systemMaterialDark' | 'systemThickMaterialDark' | 'systemChromeMaterialDark';
+export interface NativeProps extends ViewProps {
+    onAttached?: DirectEventHandler<OnAttachedEvent>;
+    onDetached?: DirectEventHandler<OnDetachedEvent>;
+    backgroundColor?: ColorValue;
+    backTitle?: string;
+    backTitleFontFamily?: string;
+    backTitleFontSize?: Int32;
+    backTitleVisible?: WithDefault<boolean, 'true'>;
+    color?: ColorValue;
+    direction?: WithDefault<DirectionType, 'ltr'>;
+    hidden?: boolean;
+    hideShadow?: boolean;
+    largeTitle?: boolean;
+    largeTitleFontFamily?: string;
+    largeTitleFontSize?: Int32;
+    largeTitleFontWeight?: string;
+    largeTitleBackgroundColor?: ColorValue;
+    largeTitleHideShadow?: boolean;
+    largeTitleColor?: ColorValue;
+    translucent?: boolean;
+    title?: string;
+    titleFontFamily?: string;
+    titleFontSize?: Int32;
+    titleFontWeight?: string;
+    titleColor?: ColorValue;
+    disableBackButtonMenu?: boolean;
+    backButtonDisplayMode?: WithDefault<BackButtonDisplayMode, 'default'>;
+    hideBackButton?: boolean;
+    backButtonInCustomView?: boolean;
+    blurEffect?: WithDefault<BlurEffect, 'none'>;
+    topInsetEnabled?: boolean;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ScreenStackHeaderConfigNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderSubviewNativeComponent.d.ts b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderSubviewNativeComponent.d.ts
index a4676ad..c4f59aa 100644
--- a/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderSubviewNativeComponent.d.ts
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderSubviewNativeComponent.d.ts
@@ -1,6 +1,6 @@
 import type { ViewProps } from 'react-native';
 import type { WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
-export type HeaderSubviewTypes = 'back' | 'right' | 'left' | 'title' | 'center' | 'searchBar';
+export type HeaderSubviewTypes = string;
 export interface NativeProps extends ViewProps {
     type?: WithDefault<HeaderSubviewTypes, 'left'>;
 }
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderSubviewNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderSubviewNativeComponent.d.ts.bak
new file mode 100644
index 0000000..a4676ad
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackHeaderSubviewNativeComponent.d.ts.bak
@@ -0,0 +1,9 @@
+import type { ViewProps } from 'react-native';
+import type { WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
+export type HeaderSubviewTypes = 'back' | 'right' | 'left' | 'title' | 'center' | 'searchBar';
+export interface NativeProps extends ViewProps {
+    type?: WithDefault<HeaderSubviewTypes, 'left'>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ScreenStackHeaderSubviewNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackNativeComponent.d.ts.bak
new file mode 100644
index 0000000..e8638ed
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/ScreenStackNativeComponent.d.ts.bak
@@ -0,0 +1,9 @@
+import type { ViewProps } from 'react-native';
+import type { DirectEventHandler } from 'react-native/Libraries/Types/CodegenTypes';
+type FinishTransitioningEvent = Readonly<{}>;
+export interface NativeProps extends ViewProps {
+    onFinishTransitioning?: DirectEventHandler<FinishTransitioningEvent>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ScreenStackNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/SearchBarNativeComponent.d.ts b/node_modules/react-native-screens/lib/typescript/fabric/SearchBarNativeComponent.d.ts
index 20e4b15..3d43bda 100644
--- a/node_modules/react-native-screens/lib/typescript/fabric/SearchBarNativeComponent.d.ts
+++ b/node_modules/react-native-screens/lib/typescript/fabric/SearchBarNativeComponent.d.ts
@@ -7,8 +7,8 @@ export type SearchButtonPressedEvent = Readonly<{
 export type ChangeTextEvent = Readonly<{
     text?: string;
 }>;
-type SearchBarPlacement = 'automatic' | 'inline' | 'stacked';
-type AutoCapitalizeType = 'none' | 'words' | 'sentences' | 'characters';
+type SearchBarPlacement = string;
+type AutoCapitalizeType = string;
 export interface NativeProps extends ViewProps {
     onSearchFocus?: DirectEventHandler<SearchBarEvent> | null;
     onSearchBlur?: DirectEventHandler<SearchBarEvent> | null;
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/SearchBarNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/SearchBarNativeComponent.d.ts.bak
new file mode 100644
index 0000000..20e4b15
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/SearchBarNativeComponent.d.ts.bak
@@ -0,0 +1,48 @@
+import type { ViewProps, ColorValue, HostComponent } from 'react-native';
+import type { WithDefault, DirectEventHandler } from 'react-native/Libraries/Types/CodegenTypes';
+export type SearchBarEvent = Readonly<{}>;
+export type SearchButtonPressedEvent = Readonly<{
+    text?: string;
+}>;
+export type ChangeTextEvent = Readonly<{
+    text?: string;
+}>;
+type SearchBarPlacement = 'automatic' | 'inline' | 'stacked';
+type AutoCapitalizeType = 'none' | 'words' | 'sentences' | 'characters';
+export interface NativeProps extends ViewProps {
+    onSearchFocus?: DirectEventHandler<SearchBarEvent> | null;
+    onSearchBlur?: DirectEventHandler<SearchBarEvent> | null;
+    onSearchButtonPress?: DirectEventHandler<SearchButtonPressedEvent> | null;
+    onCancelButtonPress?: DirectEventHandler<SearchBarEvent> | null;
+    onChangeText?: DirectEventHandler<ChangeTextEvent> | null;
+    hideWhenScrolling?: boolean;
+    autoCapitalize?: WithDefault<AutoCapitalizeType, 'none'>;
+    placeholder?: string;
+    placement?: WithDefault<SearchBarPlacement, 'stacked'>;
+    obscureBackground?: boolean;
+    hideNavigationBar?: boolean;
+    cancelButtonText?: string;
+    barTintColor?: ColorValue;
+    tintColor?: ColorValue;
+    textColor?: ColorValue;
+    disableBackButtonOverride?: boolean;
+    inputType?: string;
+    onClose?: DirectEventHandler<SearchBarEvent> | null;
+    onOpen?: DirectEventHandler<SearchBarEvent> | null;
+    hintTextColor?: ColorValue;
+    headerIconColor?: ColorValue;
+    shouldShowHintSearchIcon?: WithDefault<boolean, true>;
+}
+type ComponentType = HostComponent<NativeProps>;
+interface NativeCommands {
+    blur: (viewRef: React.ElementRef<ComponentType>) => void;
+    focus: (viewRef: React.ElementRef<ComponentType>) => void;
+    clearText: (viewRef: React.ElementRef<ComponentType>) => void;
+    toggleCancelButton: (viewRef: React.ElementRef<ComponentType>, flag: boolean) => void;
+    setText: (viewRef: React.ElementRef<ComponentType>, text: string) => void;
+    cancelSearch: (viewRef: React.ElementRef<ComponentType>) => void;
+}
+export declare const Commands: NativeCommands;
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=SearchBarNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts
index 17c745e..3883f17 100644
--- a/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts
+++ b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts
@@ -3,9 +3,9 @@ import type { DirectEventHandler, Float, WithDefault } from 'react-native/Librar
 type NativeFocusChangeEvent = {
     tabKey: string;
 };
-type BlurEffect = 'none' | 'systemDefault' | 'extraLight' | 'light' | 'dark' | 'regular' | 'prominent' | 'systemUltraThinMaterial' | 'systemThinMaterial' | 'systemMaterial' | 'systemThickMaterial' | 'systemChromeMaterial' | 'systemUltraThinMaterialLight' | 'systemThinMaterialLight' | 'systemMaterialLight' | 'systemThickMaterialLight' | 'systemChromeMaterialLight' | 'systemUltraThinMaterialDark' | 'systemThinMaterialDark' | 'systemMaterialDark' | 'systemThickMaterialDark' | 'systemChromeMaterialDark';
-type TabBarItemLabelVisibilityMode = 'auto' | 'selected' | 'labeled' | 'unlabeled';
-type TabBarMinimizeBehavior = 'automatic' | 'never' | 'onScrollDown' | 'onScrollUp';
+type BlurEffect = string;
+type TabBarItemLabelVisibilityMode = string;
+type TabBarMinimizeBehavior = string;
 export interface NativeProps extends ViewProps {
     onNativeFocusChange?: DirectEventHandler<NativeFocusChangeEvent>;
     tabBarBackgroundColor?: ColorValue;
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts.backup b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts.backup
new file mode 100644
index 0000000..17c745e
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts.backup
@@ -0,0 +1,37 @@
+import type { ColorValue, ViewProps } from 'react-native';
+import type { DirectEventHandler, Float, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
+type NativeFocusChangeEvent = {
+    tabKey: string;
+};
+type BlurEffect = 'none' | 'systemDefault' | 'extraLight' | 'light' | 'dark' | 'regular' | 'prominent' | 'systemUltraThinMaterial' | 'systemThinMaterial' | 'systemMaterial' | 'systemThickMaterial' | 'systemChromeMaterial' | 'systemUltraThinMaterialLight' | 'systemThinMaterialLight' | 'systemMaterialLight' | 'systemThickMaterialLight' | 'systemChromeMaterialLight' | 'systemUltraThinMaterialDark' | 'systemThinMaterialDark' | 'systemMaterialDark' | 'systemThickMaterialDark' | 'systemChromeMaterialDark';
+type TabBarItemLabelVisibilityMode = 'auto' | 'selected' | 'labeled' | 'unlabeled';
+type TabBarMinimizeBehavior = 'automatic' | 'never' | 'onScrollDown' | 'onScrollUp';
+export interface NativeProps extends ViewProps {
+    onNativeFocusChange?: DirectEventHandler<NativeFocusChangeEvent>;
+    tabBarBackgroundColor?: ColorValue;
+    tabBarBlurEffect?: WithDefault<BlurEffect, 'systemDefault'>;
+    tabBarTintColor?: ColorValue;
+    tabBarItemTitleFontFamily?: string;
+    tabBarItemTitleFontSize?: Float;
+    tabBarItemTitleFontWeight?: string;
+    tabBarItemTitleFontStyle?: string;
+    tabBarItemTitleFontColor?: ColorValue;
+    tabBarItemTitlePositionAdjustment?: {
+        horizontal?: Float;
+        vertical?: Float;
+    };
+    tabBarItemIconColor?: ColorValue;
+    tabBarItemBadgeBackgroundColor?: ColorValue;
+    tabBarItemTitleFontColorActive?: ColorValue;
+    tabBarItemIconColorActive?: ColorValue;
+    tabBarItemTitleFontSizeActive?: Float;
+    tabBarItemActiveIndicatorColor?: ColorValue;
+    tabBarItemActiveIndicatorEnabled?: WithDefault<boolean, true>;
+    tabBarItemRippleColor?: ColorValue;
+    tabBarItemLabelVisibilityMode?: WithDefault<TabBarItemLabelVisibilityMode, 'auto'>;
+    tabBarMinimizeBehavior?: WithDefault<TabBarMinimizeBehavior, 'automatic'>;
+    controlNavigationStateInJS?: WithDefault<boolean, false>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=BottomTabsNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts.bak
new file mode 100644
index 0000000..3883f17
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsNativeComponent.d.ts.bak
@@ -0,0 +1,37 @@
+import type { ColorValue, ViewProps } from 'react-native';
+import type { DirectEventHandler, Float, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
+type NativeFocusChangeEvent = {
+    tabKey: string;
+};
+type BlurEffect = string;
+type TabBarItemLabelVisibilityMode = string;
+type TabBarMinimizeBehavior = string;
+export interface NativeProps extends ViewProps {
+    onNativeFocusChange?: DirectEventHandler<NativeFocusChangeEvent>;
+    tabBarBackgroundColor?: ColorValue;
+    tabBarBlurEffect?: WithDefault<BlurEffect, 'systemDefault'>;
+    tabBarTintColor?: ColorValue;
+    tabBarItemTitleFontFamily?: string;
+    tabBarItemTitleFontSize?: Float;
+    tabBarItemTitleFontWeight?: string;
+    tabBarItemTitleFontStyle?: string;
+    tabBarItemTitleFontColor?: ColorValue;
+    tabBarItemTitlePositionAdjustment?: {
+        horizontal?: Float;
+        vertical?: Float;
+    };
+    tabBarItemIconColor?: ColorValue;
+    tabBarItemBadgeBackgroundColor?: ColorValue;
+    tabBarItemTitleFontColorActive?: ColorValue;
+    tabBarItemIconColorActive?: ColorValue;
+    tabBarItemTitleFontSizeActive?: Float;
+    tabBarItemActiveIndicatorColor?: ColorValue;
+    tabBarItemActiveIndicatorEnabled?: WithDefault<boolean, true>;
+    tabBarItemRippleColor?: ColorValue;
+    tabBarItemLabelVisibilityMode?: WithDefault<TabBarItemLabelVisibilityMode, 'auto'>;
+    tabBarMinimizeBehavior?: WithDefault<TabBarMinimizeBehavior, 'automatic'>;
+    controlNavigationStateInJS?: WithDefault<boolean, false>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=BottomTabsNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts
index 5721c04..233f61c 100644
--- a/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts
+++ b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts
@@ -1,13 +1,13 @@
 import type { ColorValue, ViewProps } from 'react-native';
 import { DirectEventHandler, Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
 import type { ImageSource } from 'react-native/Libraries/Image/ImageSource';
-export type IconType = 'image' | 'template' | 'sfSymbol';
+export type IconType = string;
 type GenericEmptyEvent = Readonly<{}>;
 type LifecycleStateChangeEvent = Readonly<{
     previousState: Int32;
     newState: Int32;
 }>;
-type BlurEffect = 'none' | 'systemDefault' | 'extraLight' | 'light' | 'dark' | 'regular' | 'prominent' | 'systemUltraThinMaterial' | 'systemThinMaterial' | 'systemMaterial' | 'systemThickMaterial' | 'systemChromeMaterial' | 'systemUltraThinMaterialLight' | 'systemThinMaterialLight' | 'systemMaterialLight' | 'systemThickMaterialLight' | 'systemChromeMaterialLight' | 'systemUltraThinMaterialDark' | 'systemThinMaterialDark' | 'systemMaterialDark' | 'systemThickMaterialDark' | 'systemChromeMaterialDark';
+type BlurEffect = string;
 export interface NativeProps extends ViewProps {
     onLifecycleStateChange?: DirectEventHandler<LifecycleStateChangeEvent>;
     onWillAppear?: DirectEventHandler<GenericEmptyEvent>;
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts.backup b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts.backup
new file mode 100644
index 0000000..5721c04
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts.backup
@@ -0,0 +1,51 @@
+import type { ColorValue, ViewProps } from 'react-native';
+import { DirectEventHandler, Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
+import type { ImageSource } from 'react-native/Libraries/Image/ImageSource';
+export type IconType = 'image' | 'template' | 'sfSymbol';
+type GenericEmptyEvent = Readonly<{}>;
+type LifecycleStateChangeEvent = Readonly<{
+    previousState: Int32;
+    newState: Int32;
+}>;
+type BlurEffect = 'none' | 'systemDefault' | 'extraLight' | 'light' | 'dark' | 'regular' | 'prominent' | 'systemUltraThinMaterial' | 'systemThinMaterial' | 'systemMaterial' | 'systemThickMaterial' | 'systemChromeMaterial' | 'systemUltraThinMaterialLight' | 'systemThinMaterialLight' | 'systemMaterialLight' | 'systemThickMaterialLight' | 'systemChromeMaterialLight' | 'systemUltraThinMaterialDark' | 'systemThinMaterialDark' | 'systemMaterialDark' | 'systemThickMaterialDark' | 'systemChromeMaterialDark';
+export interface NativeProps extends ViewProps {
+    onLifecycleStateChange?: DirectEventHandler<LifecycleStateChangeEvent>;
+    onWillAppear?: DirectEventHandler<GenericEmptyEvent>;
+    onDidAppear?: DirectEventHandler<GenericEmptyEvent>;
+    onWillDisappear?: DirectEventHandler<GenericEmptyEvent>;
+    onDidDisappear?: DirectEventHandler<GenericEmptyEvent>;
+    isFocused?: boolean;
+    tabKey: string;
+    tabBarBackgroundColor?: ColorValue;
+    tabBarBlurEffect?: WithDefault<BlurEffect, 'systemDefault'>;
+    tabBarItemTitleFontFamily?: string;
+    tabBarItemTitleFontSize?: Float;
+    tabBarItemTitleFontWeight?: string;
+    tabBarItemTitleFontStyle?: string;
+    tabBarItemTitleFontColor?: ColorValue;
+    tabBarItemTitlePositionAdjustment?: {
+        horizontal?: Float;
+        vertical?: Float;
+    };
+    tabBarItemIconColor?: ColorValue;
+    tabBarItemBadgeBackgroundColor?: ColorValue;
+    title?: string | undefined | null;
+    iconResourceName?: string;
+    tabBarItemBadgeTextColor?: ColorValue;
+    iconType?: WithDefault<IconType, 'sfSymbol'>;
+    iconImageSource?: ImageSource;
+    iconSfSymbolName?: string;
+    selectedIconImageSource?: ImageSource;
+    selectedIconSfSymbolName?: string;
+    badgeValue?: string;
+    specialEffects?: {
+        repeatedTabSelection?: {
+            popToRoot?: WithDefault<boolean, true>;
+            scrollToTop?: WithDefault<boolean, true>;
+        };
+    };
+    overrideScrollViewContentInsetAdjustmentBehavior?: WithDefault<boolean, true>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=BottomTabsScreenNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts.bak
new file mode 100644
index 0000000..233f61c
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/bottom-tabs/BottomTabsScreenNativeComponent.d.ts.bak
@@ -0,0 +1,51 @@
+import type { ColorValue, ViewProps } from 'react-native';
+import { DirectEventHandler, Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
+import type { ImageSource } from 'react-native/Libraries/Image/ImageSource';
+export type IconType = string;
+type GenericEmptyEvent = Readonly<{}>;
+type LifecycleStateChangeEvent = Readonly<{
+    previousState: Int32;
+    newState: Int32;
+}>;
+type BlurEffect = string;
+export interface NativeProps extends ViewProps {
+    onLifecycleStateChange?: DirectEventHandler<LifecycleStateChangeEvent>;
+    onWillAppear?: DirectEventHandler<GenericEmptyEvent>;
+    onDidAppear?: DirectEventHandler<GenericEmptyEvent>;
+    onWillDisappear?: DirectEventHandler<GenericEmptyEvent>;
+    onDidDisappear?: DirectEventHandler<GenericEmptyEvent>;
+    isFocused?: boolean;
+    tabKey: string;
+    tabBarBackgroundColor?: ColorValue;
+    tabBarBlurEffect?: WithDefault<BlurEffect, 'systemDefault'>;
+    tabBarItemTitleFontFamily?: string;
+    tabBarItemTitleFontSize?: Float;
+    tabBarItemTitleFontWeight?: string;
+    tabBarItemTitleFontStyle?: string;
+    tabBarItemTitleFontColor?: ColorValue;
+    tabBarItemTitlePositionAdjustment?: {
+        horizontal?: Float;
+        vertical?: Float;
+    };
+    tabBarItemIconColor?: ColorValue;
+    tabBarItemBadgeBackgroundColor?: ColorValue;
+    title?: string | undefined | null;
+    iconResourceName?: string;
+    tabBarItemBadgeTextColor?: ColorValue;
+    iconType?: WithDefault<IconType, 'sfSymbol'>;
+    iconImageSource?: ImageSource;
+    iconSfSymbolName?: string;
+    selectedIconImageSource?: ImageSource;
+    selectedIconSfSymbolName?: string;
+    badgeValue?: string;
+    specialEffects?: {
+        repeatedTabSelection?: {
+            popToRoot?: WithDefault<boolean, true>;
+            scrollToTop?: WithDefault<boolean, true>;
+        };
+    };
+    overrideScrollViewContentInsetAdjustmentBehavior?: WithDefault<boolean, true>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=BottomTabsScreenNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/gamma/ScreenStackHostNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/gamma/ScreenStackHostNativeComponent.d.ts.bak
new file mode 100644
index 0000000..d7f4e95
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/gamma/ScreenStackHostNativeComponent.d.ts.bak
@@ -0,0 +1,6 @@
+import type { ViewProps } from 'react-native';
+export interface NativeProps extends ViewProps {
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=ScreenStackHostNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewHostNativeComponent.d.ts b/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewHostNativeComponent.d.ts
index e420089..7269f71 100644
--- a/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewHostNativeComponent.d.ts
+++ b/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewHostNativeComponent.d.ts
@@ -5,10 +5,10 @@ type DisplayModeWillChangeEvent = {
     currentDisplayMode: string;
     nextDisplayMode: string;
 };
-type SplitViewDisplayModeButtonVisibility = 'always' | 'automatic' | 'never';
-type SplitViewSplitBehavior = 'automatic' | 'displace' | 'overlay' | 'tile';
-type SplitViewPrimaryEdge = 'leading' | 'trailing';
-type SplitViewDisplayMode = 'automatic' | 'secondaryOnly' | 'oneBesideSecondary' | 'oneOverSecondary' | 'twoBesideSecondary' | 'twoOverSecondary' | 'twoDisplaceSecondary';
+type SplitViewDisplayModeButtonVisibility = string;
+type SplitViewSplitBehavior = string;
+type SplitViewPrimaryEdge = string;
+type SplitViewDisplayMode = string;
 interface ColumnMetrics {
     minimumPrimaryColumnWidth?: WithDefault<Float, -1.0>;
     maximumPrimaryColumnWidth?: WithDefault<Float, -1.0>;
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewHostNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewHostNativeComponent.d.ts.bak
new file mode 100644
index 0000000..f5d0cfc
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewHostNativeComponent.d.ts.bak
@@ -0,0 +1,41 @@
+import type { ViewProps } from 'react-native';
+import type { DirectEventHandler, Float, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
+type GenericEmptyEvent = Readonly<{}>;
+type DisplayModeWillChangeEvent = {
+    currentDisplayMode: string;
+    nextDisplayMode: string;
+};
+type SplitViewDisplayModeButtonVisibility = string;
+type SplitViewSplitBehavior = string;
+type SplitViewPrimaryEdge = string;
+type SplitViewDisplayMode = 'automatic' | 'secondaryOnly' | 'oneBesideSecondary' | 'oneOverSecondary' | 'twoBesideSecondary' | 'twoOverSecondary' | 'twoDisplaceSecondary';
+interface ColumnMetrics {
+    minimumPrimaryColumnWidth?: WithDefault<Float, -1.0>;
+    maximumPrimaryColumnWidth?: WithDefault<Float, -1.0>;
+    preferredPrimaryColumnWidthOrFraction?: WithDefault<Float, -1.0>;
+    minimumSupplementaryColumnWidth?: WithDefault<Float, -1.0>;
+    maximumSupplementaryColumnWidth?: WithDefault<Float, -1.0>;
+    preferredSupplementaryColumnWidthOrFraction?: WithDefault<Float, -1.0>;
+    minimumSecondaryColumnWidth?: WithDefault<Float, -1.0>;
+    preferredSecondaryColumnWidthOrFraction?: WithDefault<Float, -1.0>;
+    minimumInspectorColumnWidth?: WithDefault<Float, -1.0>;
+    maximumInspectorColumnWidth?: WithDefault<Float, -1.0>;
+    preferredInspectorColumnWidthOrFraction?: WithDefault<Float, -1.0>;
+}
+interface NativeProps extends ViewProps {
+    preferredDisplayMode?: WithDefault<SplitViewDisplayMode, 'automatic'>;
+    preferredSplitBehavior?: WithDefault<SplitViewSplitBehavior, 'automatic'>;
+    primaryEdge?: WithDefault<SplitViewPrimaryEdge, 'leading'>;
+    showSecondaryToggleButton?: WithDefault<boolean, false>;
+    displayModeButtonVisibility?: WithDefault<SplitViewDisplayModeButtonVisibility, 'automatic'>;
+    columnMetrics?: ColumnMetrics;
+    presentsWithGesture?: WithDefault<boolean, true>;
+    showInspector?: WithDefault<boolean, false>;
+    onCollapse?: DirectEventHandler<GenericEmptyEvent>;
+    onDisplayModeWillChange?: DirectEventHandler<DisplayModeWillChangeEvent>;
+    onExpand?: DirectEventHandler<GenericEmptyEvent>;
+    onInspectorHide?: DirectEventHandler<GenericEmptyEvent>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=SplitViewHostNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewScreenNativeComponent.d.ts b/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewScreenNativeComponent.d.ts
index 976b90c..80038f8 100644
--- a/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewScreenNativeComponent.d.ts
+++ b/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewScreenNativeComponent.d.ts
@@ -1,7 +1,7 @@
 import type { ViewProps } from 'react-native';
 import { DirectEventHandler, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
 type GenericEmptyEvent = Readonly<{}>;
-type SplitViewScreenColumnType = 'column' | 'inspector';
+type SplitViewScreenColumnType = string;
 interface NativeProps extends ViewProps {
     columnType?: WithDefault<SplitViewScreenColumnType, 'column'>;
     onWillAppear?: DirectEventHandler<GenericEmptyEvent>;
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewScreenNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewScreenNativeComponent.d.ts.bak
new file mode 100644
index 0000000..80038f8
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/gamma/SplitViewScreenNativeComponent.d.ts.bak
@@ -0,0 +1,14 @@
+import type { ViewProps } from 'react-native';
+import { DirectEventHandler, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
+type GenericEmptyEvent = Readonly<{}>;
+type SplitViewScreenColumnType = string;
+interface NativeProps extends ViewProps {
+    columnType?: WithDefault<SplitViewScreenColumnType, 'column'>;
+    onWillAppear?: DirectEventHandler<GenericEmptyEvent>;
+    onDidAppear?: DirectEventHandler<GenericEmptyEvent>;
+    onWillDisappear?: DirectEventHandler<GenericEmptyEvent>;
+    onDidDisappear?: DirectEventHandler<GenericEmptyEvent>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=SplitViewScreenNativeComponent.d.ts.map
\ No newline at end of file
diff --git a/node_modules/react-native-screens/lib/typescript/fabric/gamma/StackScreenNativeComponent.d.ts.bak b/node_modules/react-native-screens/lib/typescript/fabric/gamma/StackScreenNativeComponent.d.ts.bak
new file mode 100644
index 0000000..49474ed
--- /dev/null
+++ b/node_modules/react-native-screens/lib/typescript/fabric/gamma/StackScreenNativeComponent.d.ts.bak
@@ -0,0 +1,14 @@
+import type { ViewProps } from 'react-native';
+import { DirectEventHandler, Int32 } from 'react-native/Libraries/Types/CodegenTypes';
+export type GenericEmptyEvent = Readonly<{}>;
+export interface NativeProps extends ViewProps {
+    maxLifecycleState: Int32;
+    screenKey: string;
+    onWillAppear?: DirectEventHandler<GenericEmptyEvent>;
+    onDidAppear?: DirectEventHandler<GenericEmptyEvent>;
+    onWillDisappear?: DirectEventHandler<GenericEmptyEvent>;
+    onDidDisappear?: DirectEventHandler<GenericEmptyEvent>;
+}
+declare const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
+export default _default;
+//# sourceMappingURL=StackScreenNativeComponent.d.ts.map
\ No newline at end of file
